buildscript {
    ext {
        springCloudVersion= "2023.0.2"
        restdocsApiSpecVersion = '0.17.1'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'

    id 'com.epages.restdocs-api-spec' version '0.18.4'
    id 'org.hidetake.swagger.generator' version '2.18.2'

}

group = 'com.donkeys_today'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    //SECURITY
    implementation 'org.springframework.boot:spring-boot-starter-security'

    //JWT
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    //Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis:3.2.1'

    //Api
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:'+ restdocsApiSpecVersion
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.15'
    testImplementation 'io.rest-assured:spring-mock-mvc:5.4.0'
    testImplementation "io.rest-assured:json-path:5.4.0"
    testImplementation "io.rest-assured:xml-path:5.4.0"
    swaggerUI 'org.webjars:swagger-ui:4.11.1'

    //actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'


}

tasks.named('test') {
    useJUnitPlatform()
}

swaggerSources {
    sample{
        setInputFile(file("${project.buildDir}/api-spec/openapi3.yaml"))
    }
}

openapi3{
    setServer("http://localhost:8080")
    title = "API 문서"
    description = "RestDocsWithSwaggerDocs"
    version = "0.0.1"
    format = "yaml"
}

//API 문서 AuthHeader 용
tasks.withType(GenerateSwaggerUI).configureEach {
    dependsOn 'openapi3'
    doFirst {
        def swaggerUIFile = file("${openapi3.outputDirectory}/openapi3.yaml")
        def securitySchemesContent ="  securitySchemes:\n" +  \
                                      "    APIKey:\n" +  \
                                      "      type: apiKey\n" +  \
                                      "      name: Authorization\n" +  \
                                      "      in: header\n" + \
                                      "security:\n" +
                                        "  - APIKey: []  # Apply the security scheme here"
        swaggerUIFile.append securitySchemesContent
    }
}

// 태스크 순서 재정의
tasks.named('generateSwaggerUISample') {
    mustRunAfter 'test'
    mustRunAfter 'processResources'
}

//정적 파일 호스팅을 위한 파일 복사
task copyDocument(type: Copy) {
    dependsOn 'generateSwaggerUISample'
    from file("build/swagger-ui-sample")
    into file("src/main/resources/static/docs")
}

//Jar 로 빌드
bootJar{
    dependsOn processResources
    from("${generateSwaggerUISample.outputDir}"){
        into 'static/docs'
    }
}

//Feign
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}


